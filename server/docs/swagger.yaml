definitions:
  routes.User:
    properties:
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
    type: object
host: fuzzy-space-guacamole-4vgqq7x6qw9fqjx6-3000.app.github.dev
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber API - Ivoire Job
  version: "1.0"
paths:
  /api/users:
    get:
      consumes:
      - application/json
      description: Get users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.User'
        "404":
          description: User not found
          schema:
            type: string
      summary: Get users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/routes.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/routes.User'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Error encrypting password
          schema:
            type: string
      summary: Create user
      tags:
      - users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.User'
        "404":
          description: User not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/routes.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.User'
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Error encrypting password
          schema:
            type: string
      summary: Update user
      tags:
      - users
  /login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/routes.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.User'
        "400":
          description: Invalid credentials
          schema:
            type: string
      summary: Login
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
