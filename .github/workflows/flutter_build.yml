name: Build Flutter Android App

on:
  push:
    branches:
      - main
    paths:
      - 'front_app/**'  # Trigger this workflow only on changes to the front_app directory
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  build_flutter_android:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.22.2
      
      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Get the latest release tag
        id: get_latest_release
        run: |
          LATEST_RELEASE=$(gh release list --limit 1 | awk '{print $2}')
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment version
        id: increment_version
        run: |
          VERSION_NUMBER=$(echo $LATEST_RELEASE | sed 's/v//')
          NEW_VERSION=$(echo $VERSION_NUMBER | awk -F. -v OFS=. '{print "v"$1"."$2"."$3+1}')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate .env File for Flutter
        run: |
          echo "MAPBOX_API_URL=${{ secrets.MAPBOX_API_URL }}" >> ./front_app/.env
          echo "MAPBOX_SEARCH_URL=${{ secrets.MAPBOX_SEARCH_URL }}" >> ./front_app/.env
          echo "MAPBOX_ACCESS_TOKEN=${{ secrets.MAPBOX_ACCESS_TOKEN }}" >> ./front_app/.env
          echo "DOWNLOAD_URL=https://s3.${{ secrets.CLOUDFLARE_R2_BUCKET_NAME }}.com/apk-${{ env.NEW_VERSION }}.apk" >> ./front_app/.env

      - run: flutter pub get
        working-directory: ./front_app

      - run: flutter build apk --release
        working-directory: ./front_app

      - name: Zip the APK
        run: |
          cd ./front_app/build/app/outputs/flutter-apk
          zip -r release-apk.zip app-release.apk

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure rclone
        run: |
          rclone config create myr2 s3 env_auth true provider Cloudflare access_key_id ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }} secret_access_key ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }} no_check_bucket true endpoint https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com

      - name: Upload APK to Cloudflare R2
        run: |
          rclone copy ./front_app/build/app/outputs/flutter-apk/app-release.apk myr2:/${{ secrets.CLOUDFLARE_R2_BUCKET_NAME }}/apk-${{ env.NEW_VERSION }}.apk --no-traverse

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ env.NEW_VERSION }}
        run: |
          gh release create $NEW_VERSION ./front_app/build/app/outputs/flutter-apk/release-apk.zip -t "Release $NEW_VERSION" -n "Release $NEW_VERSION"
